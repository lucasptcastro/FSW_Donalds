// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Restaurant {
  id             String         @id @default(uuid())
  name           String
  slug           String
  description    String
  avatarImageUrl String
  coverImageUrl  String
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  MenuCategory   MenuCategory[] // referência com a tabela MenuCategory
  Product        Product[] // referência com a tabela Products
  Order          Order[]
}

model MenuCategory {
  id           String     @id @default(uuid())
  name         String
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id]) // cria a relação entre a tabela MenuCategory e a Restaurant, onde o campo restaurant da tabela MenuCategory fará referência com o id da tabela Restaurant 
  restaurantId String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  products     Product[] // referência com a tabela Products
}

model Product {
  id             String         @id @default(uuid())
  name           String
  description    String
  price          Float
  imageUrl       String
  ingredients    String[]
  restaurant     Restaurant     @relation(fields: [restaurantId], references: [id]) // relação com a tabela Restaurant
  restaurantId   String
  menuCategory   MenuCategory   @relation(fields: [menuCategoryId], references: [id]) // relação com a tabela MenuCategory
  menuCategoryId String
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  OrderProduct   OrderProduct[]
}

model Order {
  id                Int               @id @default(autoincrement()) // não é um UUID porque um int fica melhor para que os atendentes possam identificar os pedidos. Porém, não é uma prática interessante para segunrança. O ideal seria de fato usar um UUID
  total             Float
  status            OrderStatus
  consumptionMethod ConsumptionMethod
  restaurant        Restaurant        @relation(fields: [restaurantId], references: [id])
  restaurantId      String
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  OrderProduct      OrderProduct[]
}

model OrderProduct {
  id        String   @id @default(uuid())
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  order     Order    @relation(fields: [orderId], references: [id])
  orderId   Int
  quantity  Int
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum OrderStatus {
  PENDING
  IN_PREPARATION
  FINISHED
}

enum ConsumptionMethod {
  TAKEAWAY
  DINE_IN
}
